export const articleList = [
  {
    title: '从 0 开始手把手带你搭建一套规范的 Vue3.x 工程化项目',
    content:
      'Vue3 跟 Vite 正式版发布有很长一段时间了，生态圈也渐渐丰富起来，作者已在多个项目中使用，总结一下：就是快！也不用担心稳定性问题，开发体验真不是一般好！还没尝试的同学可以从本文开始学习，从 0 开始手把手带你搭建一套规范的 Vite + Vue3 + TypeScript 前端工程化项目环境。↵↵↵本文篇幅较长，从以下几个方面展开：↵↵架构搭建↵代码规范↵提交规范↵单元测试↵自动部署↵↵↵本项目完整的代码托管在 GitHub 仓库，欢迎点亮小星星 🌟🌟↵↵技术栈↵编程语言：TypeScript 4.x + JavaScript↵构建工具：Vite 2.x↵前端框架：Vue 3.x↵路由工具：Vue Router 4.x↵状态管理：Vuex 4.x↵UI 框架：Element Plus↵CSS 预编译：Stylus / Sass / Less↵HTTP 工具：Axios↵Git Hook 工具：husky + lint-staged↵代码规范：EditorConfig + Prettier + ESLint + Airbnb JavaScript Style Guide↵提交规范：Commitizen + Commitlint↵单元测试：vue-test-utils + jest + vue-jest + ts-jest↵自动部署：GitHub Actions↵↵架构搭建请确保你的电脑上成功安装 Node.js，本项目使用 Vite 构建工具，需要 Node.js 版本 &gt;= 12.0.0。↵查看 Node.js 版本：↵node -v↵↵建议将 Node.js 升级到最新的稳定版本：↵# 使用 nvm 安装最新稳定版 Node.jsnvm install stable↵↵使用 Vite 快速初始化项目雏形↵使用 NPM：↵npm init @vitejs/app↵↵使用 Yarn：↵yarn create @vitejs/app↵↵↵↵然后按照终端提示完成以下操作：↵↵输入项目名称↵例如：本项目名称 vite-vue3-starter↵↵↵选择模板↵本项目需要使用 Vue3 + TypeScript，所以我们选择 vue-ts，会自动安装 Vue3 和 TypeScript。↵↵↵你还可以通过附加的命令行选项直接指定项目名和模板，本项目要构建 Vite + Vue3 + TypeScript 项目，则运行：↵# npm 6.xnpm init @vitejs/app vite-vue3-starter --template vue-ts# npm 7+（需要额外的双横线）npm init @vitejs/app vite-vue3-starter -- --template vue-ts# yarnyarn create @vitejs/app vite-vue3-starter --template vue-ts↵↵安装依赖↵npm install↵↵启动项目↵npm run dev↵↵↵如上图，表示 Vite + Vue3 + TypeScript 简单的项目骨架搭建完毕，下面我们来为这个项目集成 Vue Router、Vuex、Element Plus、Axios、Stylus/Sass/Less。↵↵↵修改 Vite 配置文件Vite 配置文件 vite.config.ts 位于根目录下，项目启动时会自动读取。↵本项目先做一些简单配置，例如：设置 @ 指向 src 目录、 服务启动端口、打包路径、代理等。↵关于 Vite 更多配置项及用法，请查看 Vite 官网 https://vitejs.dev/config/ 。↵import &#123; defineConfig &#125; from &#x27;vite&#x27;import vue from &#x27;@vitejs/plugin-vue&#x27;// 如果编辑器提示 path 模块找不到，则可以安装一下 @types/node -&gt; npm i @types/node -Dimport &#123; resolve &#125; from &#x27;path&#x27;// https://vitejs.dev/config/export default defineConfig(&#123;  plugins: [vue()],  resolve: &#123;    alias: &#123;      &#x27;@&#x27;: resolve(__dirname, &#x27;src&#x27;) // 设置 `@` 指向 `src` 目录    &#125;  &#125;,  base: &#x27;./&#x27;, // 设置打包路径  server: &#123;    port: 4000, // 设置服务启动端口号    open: true, // 设置服务启动时是否自动打开浏览器    cors: true // 允许跨域    // 设置代理，根据我们项目实际情况配置    // proxy: &#123;    //   &#x27;/api&#x27;: &#123;    //     target: &#x27;http://xxx.xxx.xxx.xxx:8000&#x27;,    //     changeOrigin: true,    //     secure: false,    //     rewrite: (path) =&gt; path.replace(&#x27;/api/&#x27;, &#x27;/&#x27;)    //   &#125;    // &#125;  &#125;&#125;)↵↵规范目录结构├── publish&#x2F;└── src&#x2F;    ├── assets&#x2F;                    &#x2F;&#x2F; 静态资源目录    ├── common&#x2F;                    &#x2F;&#x2F; 通用类库目录    ├── components&#x2F;                &#x2F;&#x2F; 公共组件目录    ├── router&#x2F;                    &#x2F;&#x2F; 路由配置目录    ├── store&#x2F;                     &#x2F;&#x2F; 状态管理目录    ├── style&#x2F;                     &#x2F;&#x2F; 通用 CSS 目录    ├── utils&#x2F;                     &#x2F;&#x2F; 工具函数目录    ├── views&#x2F;                     &#x2F;&#x2F; 页面组件目录    ├── App.vue    ├── main.ts    ├── shims-vue.d.ts├── tests&#x2F;                         &#x2F;&#x2F; 单元测试目录├── index.html├── tsconfig.json                  &#x2F;&#x2F; TypeScript 配置文件├── vite.config.ts                 &#x2F;&#x2F; Vite 配置文件└── package.json↵↵集成路由工具 Vue Router↵安装支持 Vue3 的路由工具 vue-router@4↵npm i vue-router@4↵↵创建 src/router/index.ts 文件↵在 src 下创建 router 目录，然后在 router 目录里新建 index.ts 文件：↵└── src&#x2F;    ├── router&#x2F;        ├── index.ts  &#x2F;&#x2F; 路由配置文件↵↵import &#123;  createRouter,  createWebHashHistory,  RouteRecordRaw&#125; from &#x27;vue-router&#x27;import Home from &#x27;@/views/home.vue&#x27;import Vuex from &#x27;@/views/vuex.vue&#x27;const routes: Array&lt;RouteRecordRaw&gt; = [  &#123;    path: &#x27;/&#x27;,    name: &#x27;Home&#x27;,    component: Home  &#125;,  &#123;    path: &#x27;/vuex&#x27;,    name: &#x27;Vuex&#x27;,    component: Vuex  &#125;,  &#123;    path: &#x27;/axios&#x27;,    name: &#x27;Axios&#x27;,    component: () =&gt; import(&#x27;@/views/axios.vue&#x27;) // 懒加载组件  &#125;]const router = createRouter(&#123;  history: createWebHashHistory(),  routes&#125;)export default router↵↵根据本项目路由配置的实际情况，你需要在 src 下创建 views 目录，用来存储页面组件。↵我们在 views 目录下创建 home.vue 、vuex.vue 、axios.vue。↵↵在 main.ts 文件中挂载路由配置↵import &#123; createApp &#125; from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import router from &#x27;./router/index&#x27;createApp(App).use(router).mount(&#x27;#app&#x27;)↵↵↵↵集成状态管理工具 Vuex↵安装支持 Vue3 的状态管理工具 vuex@next↵npm i vuex@next↵↵创建 src/store/index.ts 文件↵在 src 下创建 store 目录，然后在 store 目录里新建 index.ts 文件：↵└── src&#x2F;    ├── store&#x2F;        ├── index.ts  &#x2F;&#x2F; store 配置文件↵↵import &#123; createStore &#125; from &#x27;vuex&#x27;const defaultState = &#123;  count: 0&#125;// Create a new store instance.export default createStore(&#123;  state() &#123;    return defaultState  &#125;,  mutations: &#123;    increment(state: typeof defaultState) &#123;      state.count++    &#125;  &#125;,  actions: &#123;    increment(context) &#123;      context.commit(&#x27;increment&#x27;)    &#125;  &#125;,  getters: &#123;    double(state: typeof defaultState) &#123;      return 2 * state.count    &#125;  &#125;&#125;)↵↵在 main.ts 文件中挂载 Vuex 配置↵import &#123; createApp &#125; from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import store from &#x27;./store/index&#x27;createApp(App).use(store).mount(&#x27;#app&#x27;)↵↵↵↵集成 UI 框架 Element Plus↵安装支持 Vue3 的 UI 框架 Element Plus↵npm i element-plus↵↵在 main.ts 文件中挂载 Element Plus↵import &#123; createApp &#125; from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import ElementPlus from &#x27;element-plus&#x27;import &#x27;element-plus/lib/theme-chalk/index.css&#x27;createApp(App).use(ElementPlus).mount(&#x27;#app&#x27;)↵↵↵↵集成 HTTP 工具 Axios↵安装 Axios（Axios 跟 Vue 版本没有直接关系，安装最新即可）↵npm i axios↵↵配置 Axios↵↵为了使项目的目录结构合理且规范，我们在 src 下创建 utils 目录来存储我们常用的工具函数。↵↵Axios 作为 HTTP 工具，我们在 utils 目录下创建 axios.ts 作为 Axios 配置文件：↵└── src&#x2F;    ├── utils&#x2F;        ├── axios.ts  &#x2F;&#x2F; Axios 配置文件↵↵import Axios from &#x27;axios&#x27;import &#123; ElMessage &#125; from &#x27;element-plus&#x27;const baseURL = &#x27;https://api.github.com&#x27;const axios = Axios.create(&#123;  baseURL,  timeout: 20000 // 请求超时 20s&#125;)// 前置拦截器（发起请求之前的拦截）axios.interceptors.request.use(  (response) =&gt; &#123;    /**     * 根据你的项目实际情况来对 config 做处理     * 这里对 config 不做任何处理，直接返回     */    return response  &#125;,  (error) =&gt; &#123;    return Promise.reject(error)  &#125;)// 后置拦截器（获取到响应时的拦截）axios.interceptors.response.use(  (response) =&gt; &#123;    /**     * 根据你的项目实际情况来对 response 和 error 做处理     * 这里对 response 和 error 不做任何处理，直接返回     */    return response  &#125;,  (error) =&gt; &#123;    if (error.response &amp;&amp; error.response.data) &#123;      const code = error.response.status      const msg = error.response.data.message      ElMessage.error(`Code: $&#123;code&#125;, Message: $&#123;msg&#125;`)      console.error(`[Axios Error]`, error.response)    &#125; else &#123;      ElMessage.error(`$&#123;error&#125;`)    &#125;    return Promise.reject(error)  &#125;)export default axios↵↵使用 Axios在需要使用 Axios 文件里，引入 Axios 配置文件，参考如下：↵&lt;template&gt;&lt;/template&gt;&lt;script lang=&quot;ts&quot;&gt;  import &#123; defineComponent &#125; from &#x27;vue&#x27;  import axios from &#x27;../utils/axios&#x27;  export default defineComponent(&#123;    setup() &#123;      axios        .get(&#x27;/users/XPoet&#x27;)        .then((res) =&gt; &#123;          console.log(&#x27;res: &#x27;, res)        &#125;)        .catch((err) =&gt; &#123;          console.log(&#x27;err: &#x27;, err)        &#125;)    &#125;  &#125;)&lt;/script&gt;↵↵↵↵集成 CSS 预编译器 Stylus/Sass/Less本项目使用 CSS 预编译器 Stylus，直接安装为开发依赖即可。Vite 内部已帮我们集成了相关的 loader，不需要额外配置。同理，你也可以使用 Sass 或 Less 等。↵↵安装↵npm i stylus -D# ornpm i sass -Dnpm i less -D↵↵使用↵&lt;style lang=&quot;stylus&quot;&gt;  ...&lt;/style&gt;↵↵↵↵至此，一个基于 TypeScript + Vite + Vue3 + Vue Router + Vuex + Element Plus + Axios + Stylus/Sass/Less 的前端项目开发环境搭建完毕，项目 Demo 托管在 GitHub 仓库，需要的同学可以去下载下来，参考学习。↵下面我们来打磨这个项目，增加代码规范约束、提交规范约束、单元测试、自动部署等，让其更完善、更健壮。↵代码规范随着前端应用逐渐变得大型化和复杂化，在同一个项目中有多个人员参与时，每个人的前端能力程度不等，他们往往会用不同的编码风格和习惯在项目中写代码，长此下去，势必会让项目的健壮性越来越差。解决这些问题，理论上讲，口头约定和代码审查都可以，但是这种方式无法实时反馈，而且沟通成本过高，不够灵活，更关键的是无法把控。不以规矩，不能成方圆，我们不得不在项目使用一些工具来约束代码规范。↵本文讲解如何使用 EditorConfig + Prettier + ESLint 组合来实现代码规范化。↵这样做带来好处：↵↵解决团队之间代码不规范导致的可读性差和可维护性差的问题。↵解决团队成员不同编辑器导致的编码规范不统一问题。↵提前发现代码风格问题，给出对应规范提示，及时修复。↵减少代码审查过程中反反复复的修改过程，节约时间。↵自动格式化，统一编码风格，从此和脏乱差的代码说再见。↵↵集成 EditorConfig 配置EditorConfig 有助于为不同 IDE 编辑器上处理同一项目的多个开发人员维护一致的编码风格。↵官网：http://editorconfig.org↵在项目根目录下增加 .editorconfig 文件：↵# Editor configuration, see http://editorconfig.org# 表示是最顶层的 EditorConfig 配置文件root = true[*] # 表示所有文件适用charset = utf-8 # 设置文件字符集为 utf-8indent_style = space # 缩进风格（tab | space）indent_size = 2 # 缩进大小end_of_line = lf # 控制换行类型(lf | cr | crlf)trim_trailing_whitespace = true # 去除行首的任意空白字符insert_final_newline = true # 始终在文件末尾插入一个新行[*.md] # 表示仅 md 文件适用以下规则max_line_length = offtrim_trailing_whitespace = false↵↵注意：↵↵VSCode 使用 EditorConfig 需要去插件市场下载插件 EditorConfig for VS Code 。↵↵↵JetBrains 系列（WebStorm、IntelliJ IDEA 等）则不用额外安装插件，可直接使用 EditorConfig 配置。↵↵↵集成 Prettier 配置Prettier 是一款强大的代码格式化工具，支持 JavaScript、TypeScript、CSS、SCSS、Less、JSX、Angular、Vue、GraphQL、JSON、Markdown 等语言，基本上前端能用到的文件格式它都可以搞定，是当下最流行的代码格式化工具。↵官网：https://prettier.io/↵↵安装 Prettier↵npm i prettier -D↵↵创建 Prettier 配置文件↵Prettier 支持多种格式的配置文件，比如 .json、.yml、.yaml、.js等。↵在本项目根目录下创建 .prettierrc 文件。↵↵配置 .prettierrc↵在本项目中，我们进行如下简单配置，关于更多配置项信息，请前往官网查看 Prettier-Options 。↵&#123;  &quot;useTabs&quot;: false,  &quot;tabWidth&quot;: 2,  &quot;printWidth&quot;: 100,  &quot;singleQuote&quot;: true,  &quot;trailingComma&quot;: &quot;none&quot;,  &quot;bracketSpacing&quot;: true,  &quot;semi&quot;: false&#125;↵↵Prettier 安装且配置好之后，就能使用命令来格式化代码↵# 格式化所有文件（. 表示所有文件）npx prettier --write .↵↵↵↵注意：↵↵VSCode 编辑器使用 Prettier 配置需要下载插件 Prettier - Code formatter 。↵↵↵JetBrains 系列编辑器（WebStorm、IntelliJ IDEA 等）则不用额外安装插件，可直接使用 Prettier 配置。',
    url: '',
    tags: ['Vue3', 'Vite', '前端工程化'],
    categories: ['前端'],
    createTime: '2020-11-25 11:40:41'
  },
  {
    title: 'JavaScript 数据结构与算法（十三）二叉搜索树',
    content:
      'Vue3 跟 Vite 正式版发布有很长一段时间了，生态圈也渐渐丰富起来，作者已在多个项目中使用，总结一下：就是快！也不用担心稳定性问题，开发体验真不是一般好！还没尝试的同学可以从本文开始学习，从 0 开始手把手带你搭建一套规范的 Vite + Vue3 + TypeScript 前端工程化项目环境。↵↵↵本文篇幅较长，从以下几个方面展开：↵↵架构搭建↵代码规范↵提交规范↵单元测试↵自动部署↵↵↵本项目完整的代码托管在 GitHub 仓库，欢迎点亮小星星 🌟🌟↵↵技术栈↵编程语言：TypeScript 4.x + JavaScript↵构建工具：Vite 2.x↵前端框架：Vue 3.x↵路由工具：Vue Router 4.x↵状态管理：Vuex 4.x↵UI 框架：Element Plus↵CSS 预编译：Stylus / Sass / Less↵HTTP 工具：Axios↵Git Hook 工具：husky + lint-staged↵代码规范：EditorConfig + Prettier + ESLint + Airbnb JavaScript Style Guide↵提交规范：Commitizen + Commitlint↵单元测试：vue-test-utils + jest + vue-jest + ts-jest↵自动部署：GitHub Actions↵↵架构搭建请确保你的电脑上成功安装 Node.js，本项目使用 Vite 构建工具，需要 Node.js 版本 &gt;= 12.0.0。↵查看 Node.js 版本：↵node -v↵↵建议将 Node.js 升级到最新的稳定版本：↵# 使用 nvm 安装最新稳定版 Node.jsnvm install stable↵↵使用 Vite 快速初始化项目雏形↵使用 NPM：↵npm init @vitejs/app↵↵使用 Yarn：↵yarn create @vitejs/app↵↵↵↵然后按照终端提示完成以下操作：↵↵输入项目名称↵例如：本项目名称 vite-vue3-starter↵↵↵选择模板↵本项目需要使用 Vue3 + TypeScript，所以我们选择 vue-ts，会自动安装 Vue3 和 TypeScript。↵↵↵你还可以通过附加的命令行选项直接指定项目名和模板，本项目要构建 Vite + Vue3 + TypeScript 项目，则运行：↵# npm 6.xnpm init @vitejs/app vite-vue3-starter --template vue-ts# npm 7+（需要额外的双横线）npm init @vitejs/app vite-vue3-starter -- --template vue-ts# yarnyarn create @vitejs/app vite-vue3-starter --template vue-ts↵↵安装依赖↵npm install↵↵启动项目↵npm run dev↵↵↵如上图，表示 Vite + Vue3 + TypeScript 简单的项目骨架搭建完毕，下面我们来为这个项目集成 Vue Router、Vuex、Element Plus、Axios、Stylus/Sass/Less。↵↵↵修改 Vite 配置文件Vite 配置文件 vite.config.ts 位于根目录下，项目启动时会自动读取。↵本项目先做一些简单配置，例如：设置 @ 指向 src 目录、 服务启动端口、打包路径、代理等。↵关于 Vite 更多配置项及用法，请查看 Vite 官网 https://vitejs.dev/config/ 。↵import &#123; defineConfig &#125; from &#x27;vite&#x27;import vue from &#x27;@vitejs/plugin-vue&#x27;// 如果编辑器提示 path 模块找不到，则可以安装一下 @types/node -&gt; npm i @types/node -Dimport &#123; resolve &#125; from &#x27;path&#x27;// https://vitejs.dev/config/export default defineConfig(&#123;  plugins: [vue()],  resolve: &#123;    alias: &#123;      &#x27;@&#x27;: resolve(__dirname, &#x27;src&#x27;) // 设置 `@` 指向 `src` 目录    &#125;  &#125;,  base: &#x27;./&#x27;, // 设置打包路径  server: &#123;    port: 4000, // 设置服务启动端口号    open: true, // 设置服务启动时是否自动打开浏览器    cors: true // 允许跨域    // 设置代理，根据我们项目实际情况配置    // proxy: &#123;    //   &#x27;/api&#x27;: &#123;    //     target: &#x27;http://xxx.xxx.xxx.xxx:8000&#x27;,    //     changeOrigin: true,    //     secure: false,    //     rewrite: (path) =&gt; path.replace(&#x27;/api/&#x27;, &#x27;/&#x27;)    //   &#125;    // &#125;  &#125;&#125;)↵↵规范目录结构├── publish&#x2F;└── src&#x2F;    ├── assets&#x2F;                    &#x2F;&#x2F; 静态资源目录    ├── common&#x2F;                    &#x2F;&#x2F; 通用类库目录    ├── components&#x2F;                &#x2F;&#x2F; 公共组件目录    ├── router&#x2F;                    &#x2F;&#x2F; 路由配置目录    ├── store&#x2F;                     &#x2F;&#x2F; 状态管理目录    ├── style&#x2F;                     &#x2F;&#x2F; 通用 CSS 目录    ├── utils&#x2F;                     &#x2F;&#x2F; 工具函数目录    ├── views&#x2F;                     &#x2F;&#x2F; 页面组件目录    ├── App.vue    ├── main.ts    ├── shims-vue.d.ts├── tests&#x2F;                         &#x2F;&#x2F; 单元测试目录├── index.html├── tsconfig.json                  &#x2F;&#x2F; TypeScript 配置文件├── vite.config.ts                 &#x2F;&#x2F; Vite 配置文件└── package.json↵↵集成路由工具 Vue Router↵安装支持 Vue3 的路由工具 vue-router@4↵npm i vue-router@4↵↵创建 src/router/index.ts 文件↵在 src 下创建 router 目录，然后在 router 目录里新建 index.ts 文件：↵└── src&#x2F;    ├── router&#x2F;        ├── index.ts  &#x2F;&#x2F; 路由配置文件↵↵import &#123;  createRouter,  createWebHashHistory,  RouteRecordRaw&#125; from &#x27;vue-router&#x27;import Home from &#x27;@/views/home.vue&#x27;import Vuex from &#x27;@/views/vuex.vue&#x27;const routes: Array&lt;RouteRecordRaw&gt; = [  &#123;    path: &#x27;/&#x27;,    name: &#x27;Home&#x27;,    component: Home  &#125;,  &#123;    path: &#x27;/vuex&#x27;,    name: &#x27;Vuex&#x27;,    component: Vuex  &#125;,  &#123;    path: &#x27;/axios&#x27;,    name: &#x27;Axios&#x27;,    component: () =&gt; import(&#x27;@/views/axios.vue&#x27;) // 懒加载组件  &#125;]const router = createRouter(&#123;  history: createWebHashHistory(),  routes&#125;)export default router↵↵根据本项目路由配置的实际情况，你需要在 src 下创建 views 目录，用来存储页面组件。↵我们在 views 目录下创建 home.vue 、vuex.vue 、axios.vue。↵↵在 main.ts 文件中挂载路由配置↵import &#123; createApp &#125; from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import router from &#x27;./router/index&#x27;createApp(App).use(router).mount(&#x27;#app&#x27;)↵↵↵↵集成状态管理工具 Vuex↵安装支持 Vue3 的状态管理工具 vuex@next↵npm i vuex@next↵↵创建 src/store/index.ts 文件↵在 src 下创建 store 目录，然后在 store 目录里新建 index.ts 文件：↵└── src&#x2F;    ├── store&#x2F;        ├── index.ts  &#x2F;&#x2F; store 配置文件↵↵import &#123; createStore &#125; from &#x27;vuex&#x27;const defaultState = &#123;  count: 0&#125;// Create a new store instance.export default createStore(&#123;  state() &#123;    return defaultState  &#125;,  mutations: &#123;    increment(state: typeof defaultState) &#123;      state.count++    &#125;  &#125;,  actions: &#123;    increment(context) &#123;      context.commit(&#x27;increment&#x27;)    &#125;  &#125;,  getters: &#123;    double(state: typeof defaultState) &#123;      return 2 * state.count    &#125;  &#125;&#125;)↵↵在 main.ts 文件中挂载 Vuex 配置↵import &#123; createApp &#125; from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import store from &#x27;./store/index&#x27;createApp(App).use(store).mount(&#x27;#app&#x27;)↵↵↵↵集成 UI 框架 Element Plus↵安装支持 Vue3 的 UI 框架 Element Plus↵npm i element-plus↵↵在 main.ts 文件中挂载 Element Plus↵import &#123; createApp &#125; from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import ElementPlus from &#x27;element-plus&#x27;import &#x27;element-plus/lib/theme-chalk/index.css&#x27;createApp(App).use(ElementPlus).mount(&#x27;#app&#x27;)↵↵↵↵集成 HTTP 工具 Axios↵安装 Axios（Axios 跟 Vue 版本没有直接关系，安装最新即可）↵npm i axios↵↵配置 Axios↵↵为了使项目的目录结构合理且规范，我们在 src 下创建 utils 目录来存储我们常用的工具函数。↵↵Axios 作为 HTTP 工具，我们在 utils 目录下创建 axios.ts 作为 Axios 配置文件：↵└── src&#x2F;    ├── utils&#x2F;        ├── axios.ts  &#x2F;&#x2F; Axios 配置文件↵↵import Axios from &#x27;axios&#x27;import &#123; ElMessage &#125; from &#x27;element-plus&#x27;const baseURL = &#x27;https://api.github.com&#x27;const axios = Axios.create(&#123;  baseURL,  timeout: 20000 // 请求超时 20s&#125;)// 前置拦截器（发起请求之前的拦截）axios.interceptors.request.use(  (response) =&gt; &#123;    /**     * 根据你的项目实际情况来对 config 做处理     * 这里对 config 不做任何处理，直接返回     */    return response  &#125;,  (error) =&gt; &#123;    return Promise.reject(error)  &#125;)// 后置拦截器（获取到响应时的拦截）axios.interceptors.response.use(  (response) =&gt; &#123;    /**     * 根据你的项目实际情况来对 response 和 error 做处理     * 这里对 response 和 error 不做任何处理，直接返回     */    return response  &#125;,  (error) =&gt; &#123;    if (error.response &amp;&amp; error.response.data) &#123;      const code = error.response.status      const msg = error.response.data.message      ElMessage.error(`Code: $&#123;code&#125;, Message: $&#123;msg&#125;`)      console.error(`[Axios Error]`, error.response)    &#125; else &#123;      ElMessage.error(`$&#123;error&#125;`)    &#125;    return Promise.reject(error)  &#125;)export default axios↵↵使用 Axios在需要使用 Axios 文件里，引入 Axios 配置文件，参考如下：↵&lt;template&gt;&lt;/template&gt;&lt;script lang=&quot;ts&quot;&gt;  import &#123; defineComponent &#125; from &#x27;vue&#x27;  import axios from &#x27;../utils/axios&#x27;  export default defineComponent(&#123;    setup() &#123;      axios        .get(&#x27;/users/XPoet&#x27;)        .then((res) =&gt; &#123;          console.log(&#x27;res: &#x27;, res)        &#125;)        .catch((err) =&gt; &#123;          console.log(&#x27;err: &#x27;, err)        &#125;)    &#125;  &#125;)&lt;/script&gt;↵↵↵↵集成 CSS 预编译器 Stylus/Sass/Less本项目使用 CSS 预编译器 Stylus，直接安装为开发依赖即可。Vite 内部已帮我们集成了相关的 loader，不需要额外配置。同理，你也可以使用 Sass 或 Less 等。↵↵安装↵npm i stylus -D# ornpm i sass -Dnpm i less -D↵↵使用↵&lt;style lang=&quot;stylus&quot;&gt;  ...&lt;/style&gt;↵↵↵↵至此，一个基于 TypeScript + Vite + Vue3 + Vue Router + Vuex + Element Plus + Axios + Stylus/Sass/Less 的前端项目开发环境搭建完毕，项目 Demo 托管在 GitHub 仓库，需要的同学可以去下载下来，参考学习。↵下面我们来打磨这个项目，增加代码规范约束、提交规范约束、单元测试、自动部署等，让其更完善、更健壮。↵代码规范随着前端应用逐渐变得大型化和复杂化，在同一个项目中有多个人员参与时，每个人的前端能力程度不等，他们往往会用不同的编码风格和习惯在项目中写代码，长此下去，势必会让项目的健壮性越来越差。解决这些问题，理论上讲，口头约定和代码审查都可以，但是这种方式无法实时反馈，而且沟通成本过高，不够灵活，更关键的是无法把控。不以规矩，不能成方圆，我们不得不在项目使用一些工具来约束代码规范。↵本文讲解如何使用 EditorConfig + Prettier + ESLint 组合来实现代码规范化。↵这样做带来好处：↵↵解决团队之间代码不规范导致的可读性差和可维护性差的问题。↵解决团队成员不同编辑器导致的编码规范不统一问题。↵提前发现代码风格问题，给出对应规范提示，及时修复。↵减少代码审查过程中反反复复的修改过程，节约时间。↵自动格式化，统一编码风格，从此和脏乱差的代码说再见。↵↵集成 EditorConfig 配置EditorConfig 有助于为不同 IDE 编辑器上处理同一项目的多个开发人员维护一致的编码风格。↵官网：http://editorconfig.org↵在项目根目录下增加 .editorconfig 文件：↵# Editor configuration, see http://editorconfig.org# 表示是最顶层的 EditorConfig 配置文件root = true[*] # 表示所有文件适用charset = utf-8 # 设置文件字符集为 utf-8indent_style = space # 缩进风格（tab | space）indent_size = 2 # 缩进大小end_of_line = lf # 控制换行类型(lf | cr | crlf)trim_trailing_whitespace = true # 去除行首的任意空白字符insert_final_newline = true # 始终在文件末尾插入一个新行[*.md] # 表示仅 md 文件适用以下规则max_line_length = offtrim_trailing_whitespace = false↵↵注意：↵↵VSCode 使用 EditorConfig 需要去插件市场下载插件 EditorConfig for VS Code 。↵↵↵JetBrains 系列（WebStorm、IntelliJ IDEA 等）则不用额外安装插件，可直接使用 EditorConfig 配置。↵↵↵集成 Prettier 配置Prettier 是一款强大的代码格式化工具，支持 JavaScript、TypeScript、CSS、SCSS、Less、JSX、Angular、Vue、GraphQL、JSON、Markdown 等语言，基本上前端能用到的文件格式它都可以搞定，是当下最流行的代码格式化工具。↵官网：https://prettier.io/↵↵安装 Prettier↵npm i prettier -D↵↵创建 Prettier 配置文件↵Prettier 支持多种格式的配置文件，比如 .json、.yml、.yaml、.js等。↵在本项目根目录下创建 .prettierrc 文件。↵↵配置 .prettierrc↵在本项目中，我们进行如下简单配置，关于更多配置项信息，请前往官网查看 Prettier-Options 。↵&#123;  &quot;useTabs&quot;: false,  &quot;tabWidth&quot;: 2,  &quot;printWidth&quot;: 100,  &quot;singleQuote&quot;: true,  &quot;trailingComma&quot;: &quot;none&quot;,  &quot;bracketSpacing&quot;: true,  &quot;semi&quot;: false&#125;↵↵Prettier 安装且配置好之后，就能使用命令来格式化代码↵# 格式化所有文件（. 表示所有文件）npx prettier --write .↵↵↵↵注意：↵↵VSCode 编辑器使用 Prettier 配置需要下载插件 Prettier - Code formatter 。↵↵↵JetBrains 系列编辑器（WebStorm、IntelliJ IDEA 等）则不用额外安装插件，可直接使用 Prettier 配置。',
    url: '',
    tags: ['Vue3', 'Vite', '前端工程化'],
    categories: ['前端'],
    createTime: '2021-01-25 11:40:41'
  },
  {
    title: '本文带你入门前端工程化，分为 7 个小节讲解',
    content:
      'Vue3 跟 Vite 正式版发布有很长一段时间了，生态圈也渐渐丰富起来，作者已在多个项目中使用，总结一下：就是快！也不用担心稳定性问题，开发体验真不是一般好！还没尝试的同学可以从本文开始学习，从 0 开始手把手带你搭建一套规范的 Vite + Vue3 + TypeScript 前端工程化项目环境。↵↵↵本文篇幅较长，从以下几个方面展开：↵↵架构搭建↵代码规范↵提交规范↵单元测试↵自动部署↵↵↵本项目完整的代码托管在 GitHub 仓库，欢迎点亮小星星 🌟🌟↵↵技术栈↵编程语言：TypeScript 4.x + JavaScript↵构建工具：Vite 2.x↵前端框架：Vue 3.x↵路由工具：Vue Router 4.x↵状态管理：Vuex 4.x↵UI 框架：Element Plus↵CSS 预编译：Stylus / Sass / Less↵HTTP 工具：Axios↵Git Hook 工具：husky + lint-staged↵代码规范：EditorConfig + Prettier + ESLint + Airbnb JavaScript Style Guide↵提交规范：Commitizen + Commitlint↵单元测试：vue-test-utils + jest + vue-jest + ts-jest↵自动部署：GitHub Actions↵↵架构搭建请确保你的电脑上成功安装 Node.js，本项目使用 Vite 构建工具，需要 Node.js 版本 &gt;= 12.0.0。↵查看 Node.js 版本：↵node -v↵↵建议将 Node.js 升级到最新的稳定版本：↵# 使用 nvm 安装最新稳定版 Node.jsnvm install stable↵↵使用 Vite 快速初始化项目雏形↵使用 NPM：↵npm init @vitejs/app↵↵使用 Yarn：↵yarn create @vitejs/app↵↵↵↵然后按照终端提示完成以下操作：↵↵输入项目名称↵例如：本项目名称 vite-vue3-starter↵↵↵选择模板↵本项目需要使用 Vue3 + TypeScript，所以我们选择 vue-ts，会自动安装 Vue3 和 TypeScript。↵↵↵你还可以通过附加的命令行选项直接指定项目名和模板，本项目要构建 Vite + Vue3 + TypeScript 项目，则运行：↵# npm 6.xnpm init @vitejs/app vite-vue3-starter --template vue-ts# npm 7+（需要额外的双横线）npm init @vitejs/app vite-vue3-starter -- --template vue-ts# yarnyarn create @vitejs/app vite-vue3-starter --template vue-ts↵↵安装依赖↵npm install↵↵启动项目↵npm run dev↵↵↵如上图，表示 Vite + Vue3 + TypeScript 简单的项目骨架搭建完毕，下面我们来为这个项目集成 Vue Router、Vuex、Element Plus、Axios、Stylus/Sass/Less。↵↵↵修改 Vite 配置文件Vite 配置文件 vite.config.ts 位于根目录下，项目启动时会自动读取。↵本项目先做一些简单配置，例如：设置 @ 指向 src 目录、 服务启动端口、打包路径、代理等。↵关于 Vite 更多配置项及用法，请查看 Vite 官网 https://vitejs.dev/config/ 。↵import &#123; defineConfig &#125; from &#x27;vite&#x27;import vue from &#x27;@vitejs/plugin-vue&#x27;// 如果编辑器提示 path 模块找不到，则可以安装一下 @types/node -&gt; npm i @types/node -Dimport &#123; resolve &#125; from &#x27;path&#x27;// https://vitejs.dev/config/export default defineConfig(&#123;  plugins: [vue()],  resolve: &#123;    alias: &#123;      &#x27;@&#x27;: resolve(__dirname, &#x27;src&#x27;) // 设置 `@` 指向 `src` 目录    &#125;  &#125;,  base: &#x27;./&#x27;, // 设置打包路径  server: &#123;    port: 4000, // 设置服务启动端口号    open: true, // 设置服务启动时是否自动打开浏览器    cors: true // 允许跨域    // 设置代理，根据我们项目实际情况配置    // proxy: &#123;    //   &#x27;/api&#x27;: &#123;    //     target: &#x27;http://xxx.xxx.xxx.xxx:8000&#x27;,    //     changeOrigin: true,    //     secure: false,    //     rewrite: (path) =&gt; path.replace(&#x27;/api/&#x27;, &#x27;/&#x27;)    //   &#125;    // &#125;  &#125;&#125;)↵↵规范目录结构├── publish&#x2F;└── src&#x2F;    ├── assets&#x2F;                    &#x2F;&#x2F; 静态资源目录    ├── common&#x2F;                    &#x2F;&#x2F; 通用类库目录    ├── components&#x2F;                &#x2F;&#x2F; 公共组件目录    ├── router&#x2F;                    &#x2F;&#x2F; 路由配置目录    ├── store&#x2F;                     &#x2F;&#x2F; 状态管理目录    ├── style&#x2F;                     &#x2F;&#x2F; 通用 CSS 目录    ├── utils&#x2F;                     &#x2F;&#x2F; 工具函数目录    ├── views&#x2F;                     &#x2F;&#x2F; 页面组件目录    ├── App.vue    ├── main.ts    ├── shims-vue.d.ts├── tests&#x2F;                         &#x2F;&#x2F; 单元测试目录├── index.html├── tsconfig.json                  &#x2F;&#x2F; TypeScript 配置文件├── vite.config.ts                 &#x2F;&#x2F; Vite 配置文件└── package.json↵↵集成路由工具 Vue Router↵安装支持 Vue3 的路由工具 vue-router@4↵npm i vue-router@4↵↵创建 src/router/index.ts 文件↵在 src 下创建 router 目录，然后在 router 目录里新建 index.ts 文件：↵└── src&#x2F;    ├── router&#x2F;        ├── index.ts  &#x2F;&#x2F; 路由配置文件↵↵import &#123;  createRouter,  createWebHashHistory,  RouteRecordRaw&#125; from &#x27;vue-router&#x27;import Home from &#x27;@/views/home.vue&#x27;import Vuex from &#x27;@/views/vuex.vue&#x27;const routes: Array&lt;RouteRecordRaw&gt; = [  &#123;    path: &#x27;/&#x27;,    name: &#x27;Home&#x27;,    component: Home  &#125;,  &#123;    path: &#x27;/vuex&#x27;,    name: &#x27;Vuex&#x27;,    component: Vuex  &#125;,  &#123;    path: &#x27;/axios&#x27;,    name: &#x27;Axios&#x27;,    component: () =&gt; import(&#x27;@/views/axios.vue&#x27;) // 懒加载组件  &#125;]const router = createRouter(&#123;  history: createWebHashHistory(),  routes&#125;)export default router↵↵根据本项目路由配置的实际情况，你需要在 src 下创建 views 目录，用来存储页面组件。↵我们在 views 目录下创建 home.vue 、vuex.vue 、axios.vue。↵↵在 main.ts 文件中挂载路由配置↵import &#123; createApp &#125; from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import router from &#x27;./router/index&#x27;createApp(App).use(router).mount(&#x27;#app&#x27;)↵↵↵↵集成状态管理工具 Vuex↵安装支持 Vue3 的状态管理工具 vuex@next↵npm i vuex@next↵↵创建 src/store/index.ts 文件↵在 src 下创建 store 目录，然后在 store 目录里新建 index.ts 文件：↵└── src&#x2F;    ├── store&#x2F;        ├── index.ts  &#x2F;&#x2F; store 配置文件↵↵import &#123; createStore &#125; from &#x27;vuex&#x27;const defaultState = &#123;  count: 0&#125;// Create a new store instance.export default createStore(&#123;  state() &#123;    return defaultState  &#125;,  mutations: &#123;    increment(state: typeof defaultState) &#123;      state.count++    &#125;  &#125;,  actions: &#123;    increment(context) &#123;      context.commit(&#x27;increment&#x27;)    &#125;  &#125;,  getters: &#123;    double(state: typeof defaultState) &#123;      return 2 * state.count    &#125;  &#125;&#125;)↵↵在 main.ts 文件中挂载 Vuex 配置↵import &#123; createApp &#125; from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import store from &#x27;./store/index&#x27;createApp(App).use(store).mount(&#x27;#app&#x27;)↵↵↵↵集成 UI 框架 Element Plus↵安装支持 Vue3 的 UI 框架 Element Plus↵npm i element-plus↵↵在 main.ts 文件中挂载 Element Plus↵import &#123; createApp &#125; from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import ElementPlus from &#x27;element-plus&#x27;import &#x27;element-plus/lib/theme-chalk/index.css&#x27;createApp(App).use(ElementPlus).mount(&#x27;#app&#x27;)↵↵↵↵集成 HTTP 工具 Axios↵安装 Axios（Axios 跟 Vue 版本没有直接关系，安装最新即可）↵npm i axios↵↵配置 Axios↵↵为了使项目的目录结构合理且规范，我们在 src 下创建 utils 目录来存储我们常用的工具函数。↵↵Axios 作为 HTTP 工具，我们在 utils 目录下创建 axios.ts 作为 Axios 配置文件：↵└── src&#x2F;    ├── utils&#x2F;        ├── axios.ts  &#x2F;&#x2F; Axios 配置文件↵↵import Axios from &#x27;axios&#x27;import &#123; ElMessage &#125; from &#x27;element-plus&#x27;const baseURL = &#x27;https://api.github.com&#x27;const axios = Axios.create(&#123;  baseURL,  timeout: 20000 // 请求超时 20s&#125;)// 前置拦截器（发起请求之前的拦截）axios.interceptors.request.use(  (response) =&gt; &#123;    /**     * 根据你的项目实际情况来对 config 做处理     * 这里对 config 不做任何处理，直接返回     */    return response  &#125;,  (error) =&gt; &#123;    return Promise.reject(error)  &#125;)// 后置拦截器（获取到响应时的拦截）axios.interceptors.response.use(  (response) =&gt; &#123;    /**     * 根据你的项目实际情况来对 response 和 error 做处理     * 这里对 response 和 error 不做任何处理，直接返回     */    return response  &#125;,  (error) =&gt; &#123;    if (error.response &amp;&amp; error.response.data) &#123;      const code = error.response.status      const msg = error.response.data.message      ElMessage.error(`Code: $&#123;code&#125;, Message: $&#123;msg&#125;`)      console.error(`[Axios Error]`, error.response)    &#125; else &#123;      ElMessage.error(`$&#123;error&#125;`)    &#125;    return Promise.reject(error)  &#125;)export default axios↵↵使用 Axios在需要使用 Axios 文件里，引入 Axios 配置文件，参考如下：↵&lt;template&gt;&lt;/template&gt;&lt;script lang=&quot;ts&quot;&gt;  import &#123; defineComponent &#125; from &#x27;vue&#x27;  import axios from &#x27;../utils/axios&#x27;  export default defineComponent(&#123;    setup() &#123;      axios        .get(&#x27;/users/XPoet&#x27;)        .then((res) =&gt; &#123;          console.log(&#x27;res: &#x27;, res)        &#125;)        .catch((err) =&gt; &#123;          console.log(&#x27;err: &#x27;, err)        &#125;)    &#125;  &#125;)&lt;/script&gt;↵↵↵↵集成 CSS 预编译器 Stylus/Sass/Less本项目使用 CSS 预编译器 Stylus，直接安装为开发依赖即可。Vite 内部已帮我们集成了相关的 loader，不需要额外配置。同理，你也可以使用 Sass 或 Less 等。↵↵安装↵npm i stylus -D# ornpm i sass -Dnpm i less -D↵↵使用↵&lt;style lang=&quot;stylus&quot;&gt;  ...&lt;/style&gt;↵↵↵↵至此，一个基于 TypeScript + Vite + Vue3 + Vue Router + Vuex + Element Plus + Axios + Stylus/Sass/Less 的前端项目开发环境搭建完毕，项目 Demo 托管在 GitHub 仓库，需要的同学可以去下载下来，参考学习。↵下面我们来打磨这个项目，增加代码规范约束、提交规范约束、单元测试、自动部署等，让其更完善、更健壮。↵代码规范随着前端应用逐渐变得大型化和复杂化，在同一个项目中有多个人员参与时，每个人的前端能力程度不等，他们往往会用不同的编码风格和习惯在项目中写代码，长此下去，势必会让项目的健壮性越来越差。解决这些问题，理论上讲，口头约定和代码审查都可以，但是这种方式无法实时反馈，而且沟通成本过高，不够灵活，更关键的是无法把控。不以规矩，不能成方圆，我们不得不在项目使用一些工具来约束代码规范。↵本文讲解如何使用 EditorConfig + Prettier + ESLint 组合来实现代码规范化。↵这样做带来好处：↵↵解决团队之间代码不规范导致的可读性差和可维护性差的问题。↵解决团队成员不同编辑器导致的编码规范不统一问题。↵提前发现代码风格问题，给出对应规范提示，及时修复。↵减少代码审查过程中反反复复的修改过程，节约时间。↵自动格式化，统一编码风格，从此和脏乱差的代码说再见。↵↵集成 EditorConfig 配置EditorConfig 有助于为不同 IDE 编辑器上处理同一项目的多个开发人员维护一致的编码风格。↵官网：http://editorconfig.org↵在项目根目录下增加 .editorconfig 文件：↵# Editor configuration, see http://editorconfig.org# 表示是最顶层的 EditorConfig 配置文件root = true[*] # 表示所有文件适用charset = utf-8 # 设置文件字符集为 utf-8indent_style = space # 缩进风格（tab | space）indent_size = 2 # 缩进大小end_of_line = lf # 控制换行类型(lf | cr | crlf)trim_trailing_whitespace = true # 去除行首的任意空白字符insert_final_newline = true # 始终在文件末尾插入一个新行[*.md] # 表示仅 md 文件适用以下规则max_line_length = offtrim_trailing_whitespace = false↵↵注意：↵↵VSCode 使用 EditorConfig 需要去插件市场下载插件 EditorConfig for VS Code 。↵↵↵JetBrains 系列（WebStorm、IntelliJ IDEA 等）则不用额外安装插件，可直接使用 EditorConfig 配置。↵↵↵集成 Prettier 配置Prettier 是一款强大的代码格式化工具，支持 JavaScript、TypeScript、CSS、SCSS、Less、JSX、Angular、Vue、GraphQL、JSON、Markdown 等语言，基本上前端能用到的文件格式它都可以搞定，是当下最流行的代码格式化工具。↵官网：https://prettier.io/↵↵安装 Prettier↵npm i prettier -D↵↵创建 Prettier 配置文件↵Prettier 支持多种格式的配置文件，比如 .json、.yml、.yaml、.js等。↵在本项目根目录下创建 .prettierrc 文件。↵↵配置 .prettierrc↵在本项目中，我们进行如下简单配置，关于更多配置项信息，请前往官网查看 Prettier-Options 。↵&#123;  &quot;useTabs&quot;: false,  &quot;tabWidth&quot;: 2,  &quot;printWidth&quot;: 100,  &quot;singleQuote&quot;: true,  &quot;trailingComma&quot;: &quot;none&quot;,  &quot;bracketSpacing&quot;: true,  &quot;semi&quot;: false&#125;↵↵Prettier 安装且配置好之后，就能使用命令来格式化代码↵# 格式化所有文件（. 表示所有文件）npx prettier --write .↵↵↵↵注意：↵↵VSCode 编辑器使用 Prettier 配置需要下载插件 Prettier - Code formatter 。↵↵↵JetBrains 系列编辑器（WebStorm、IntelliJ IDEA 等）则不用额外安装插件，可直接使用 Prettier 配置。',
    url: '',
    tags: ['Vue3', 'Vite', '前端工程化'],
    categories: ['前端'],
    createTime: '2021-04-28 13:40:41'
  },
  {
    title: '入门前端工程化，分为 9 个小节讲解',
    content:
      'Vue3 跟 Vite 正式版发布有很长一段时间了，生态圈也渐渐丰富起来，作者已在多个项目中使用，总结一下：就是快！也不用担心稳定性问题，开发体验真不是一般好！还没尝试的同学可以从本文开始学习，从 0 开始手把手带你搭建一套规范的 Vite + Vue3 + TypeScript 前端工程化项目环境。↵↵↵本文篇幅较长，从以下几个方面展开：↵↵架构搭建↵代码规范↵提交规范↵单元测试↵自动部署↵↵↵本项目完整的代码托管在 GitHub 仓库，欢迎点亮小星星 🌟🌟↵↵技术栈↵编程语言：TypeScript 4.x + JavaScript↵构建工具：Vite 2.x↵前端框架：Vue 3.x↵路由工具：Vue Router 4.x↵状态管理：Vuex 4.x↵UI 框架：Element Plus↵CSS 预编译：Stylus / Sass / Less↵HTTP 工具：Axios↵Git Hook 工具：husky + lint-staged↵代码规范：EditorConfig + Prettier + ESLint + Airbnb JavaScript Style Guide↵提交规范：Commitizen + Commitlint↵单元测试：vue-test-utils + jest + vue-jest + ts-jest↵自动部署：GitHub Actions↵↵架构搭建请确保你的电脑上成功安装 Node.js，本项目使用 Vite 构建工具，需要 Node.js 版本 &gt;= 12.0.0。↵查看 Node.js 版本：↵node -v↵↵建议将 Node.js 升级到最新的稳定版本：↵# 使用 nvm 安装最新稳定版 Node.jsnvm install stable↵↵使用 Vite 快速初始化项目雏形↵使用 NPM：↵npm init @vitejs/app↵↵使用 Yarn：↵yarn create @vitejs/app↵↵↵↵然后按照终端提示完成以下操作：↵↵输入项目名称↵例如：本项目名称 vite-vue3-starter↵↵↵选择模板↵本项目需要使用 Vue3 + TypeScript，所以我们选择 vue-ts，会自动安装 Vue3 和 TypeScript。↵↵↵你还可以通过附加的命令行选项直接指定项目名和模板，本项目要构建 Vite + Vue3 + TypeScript 项目，则运行：↵# npm 6.xnpm init @vitejs/app vite-vue3-starter --template vue-ts# npm 7+（需要额外的双横线）npm init @vitejs/app vite-vue3-starter -- --template vue-ts# yarnyarn create @vitejs/app vite-vue3-starter --template vue-ts↵↵安装依赖↵npm install↵↵启动项目↵npm run dev↵↵↵如上图，表示 Vite + Vue3 + TypeScript 简单的项目骨架搭建完毕，下面我们来为这个项目集成 Vue Router、Vuex、Element Plus、Axios、Stylus/Sass/Less。↵↵↵修改 Vite 配置文件Vite 配置文件 vite.config.ts 位于根目录下，项目启动时会自动读取。↵本项目先做一些简单配置，例如：设置 @ 指向 src 目录、 服务启动端口、打包路径、代理等。↵关于 Vite 更多配置项及用法，请查看 Vite 官网 https://vitejs.dev/config/ 。↵import &#123; defineConfig &#125; from &#x27;vite&#x27;import vue from &#x27;@vitejs/plugin-vue&#x27;// 如果编辑器提示 path 模块找不到，则可以安装一下 @types/node -&gt; npm i @types/node -Dimport &#123; resolve &#125; from &#x27;path&#x27;// https://vitejs.dev/config/export default defineConfig(&#123;  plugins: [vue()],  resolve: &#123;    alias: &#123;      &#x27;@&#x27;: resolve(__dirname, &#x27;src&#x27;) // 设置 `@` 指向 `src` 目录    &#125;  &#125;,  base: &#x27;./&#x27;, // 设置打包路径  server: &#123;    port: 4000, // 设置服务启动端口号    open: true, // 设置服务启动时是否自动打开浏览器    cors: true // 允许跨域    // 设置代理，根据我们项目实际情况配置    // proxy: &#123;    //   &#x27;/api&#x27;: &#123;    //     target: &#x27;http://xxx.xxx.xxx.xxx:8000&#x27;,    //     changeOrigin: true,    //     secure: false,    //     rewrite: (path) =&gt; path.replace(&#x27;/api/&#x27;, &#x27;/&#x27;)    //   &#125;    // &#125;  &#125;&#125;)↵↵规范目录结构├── publish&#x2F;└── src&#x2F;    ├── assets&#x2F;                    &#x2F;&#x2F; 静态资源目录    ├── common&#x2F;                    &#x2F;&#x2F; 通用类库目录    ├── components&#x2F;                &#x2F;&#x2F; 公共组件目录    ├── router&#x2F;                    &#x2F;&#x2F; 路由配置目录    ├── store&#x2F;                     &#x2F;&#x2F; 状态管理目录    ├── style&#x2F;                     &#x2F;&#x2F; 通用 CSS 目录    ├── utils&#x2F;                     &#x2F;&#x2F; 工具函数目录    ├── views&#x2F;                     &#x2F;&#x2F; 页面组件目录    ├── App.vue    ├── main.ts    ├── shims-vue.d.ts├── tests&#x2F;                         &#x2F;&#x2F; 单元测试目录├── index.html├── tsconfig.json                  &#x2F;&#x2F; TypeScript 配置文件├── vite.config.ts                 &#x2F;&#x2F; Vite 配置文件└── package.json↵↵集成路由工具 Vue Router↵安装支持 Vue3 的路由工具 vue-router@4↵npm i vue-router@4↵↵创建 src/router/index.ts 文件↵在 src 下创建 router 目录，然后在 router 目录里新建 index.ts 文件：↵└── src&#x2F;    ├── router&#x2F;        ├── index.ts  &#x2F;&#x2F; 路由配置文件↵↵import &#123;  createRouter,  createWebHashHistory,  RouteRecordRaw&#125; from &#x27;vue-router&#x27;import Home from &#x27;@/views/home.vue&#x27;import Vuex from &#x27;@/views/vuex.vue&#x27;const routes: Array&lt;RouteRecordRaw&gt; = [  &#123;    path: &#x27;/&#x27;,    name: &#x27;Home&#x27;,    component: Home  &#125;,  &#123;    path: &#x27;/vuex&#x27;,    name: &#x27;Vuex&#x27;,    component: Vuex  &#125;,  &#123;    path: &#x27;/axios&#x27;,    name: &#x27;Axios&#x27;,    component: () =&gt; import(&#x27;@/views/axios.vue&#x27;) // 懒加载组件  &#125;]const router = createRouter(&#123;  history: createWebHashHistory(),  routes&#125;)export default router↵↵根据本项目路由配置的实际情况，你需要在 src 下创建 views 目录，用来存储页面组件。↵我们在 views 目录下创建 home.vue 、vuex.vue 、axios.vue。↵↵在 main.ts 文件中挂载路由配置↵import &#123; createApp &#125; from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import router from &#x27;./router/index&#x27;createApp(App).use(router).mount(&#x27;#app&#x27;)↵↵↵↵集成状态管理工具 Vuex↵安装支持 Vue3 的状态管理工具 vuex@next↵npm i vuex@next↵↵创建 src/store/index.ts 文件↵在 src 下创建 store 目录，然后在 store 目录里新建 index.ts 文件：↵└── src&#x2F;    ├── store&#x2F;        ├── index.ts  &#x2F;&#x2F; store 配置文件↵↵import &#123; createStore &#125; from &#x27;vuex&#x27;const defaultState = &#123;  count: 0&#125;// Create a new store instance.export default createStore(&#123;  state() &#123;    return defaultState  &#125;,  mutations: &#123;    increment(state: typeof defaultState) &#123;      state.count++    &#125;  &#125;,  actions: &#123;    increment(context) &#123;      context.commit(&#x27;increment&#x27;)    &#125;  &#125;,  getters: &#123;    double(state: typeof defaultState) &#123;      return 2 * state.count    &#125;  &#125;&#125;)↵↵在 main.ts 文件中挂载 Vuex 配置↵import &#123; createApp &#125; from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import store from &#x27;./store/index&#x27;createApp(App).use(store).mount(&#x27;#app&#x27;)↵↵↵↵集成 UI 框架 Element Plus↵安装支持 Vue3 的 UI 框架 Element Plus↵npm i element-plus↵↵在 main.ts 文件中挂载 Element Plus↵import &#123; createApp &#125; from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import ElementPlus from &#x27;element-plus&#x27;import &#x27;element-plus/lib/theme-chalk/index.css&#x27;createApp(App).use(ElementPlus).mount(&#x27;#app&#x27;)↵↵↵↵集成 HTTP 工具 Axios↵安装 Axios（Axios 跟 Vue 版本没有直接关系，安装最新即可）↵npm i axios↵↵配置 Axios↵↵为了使项目的目录结构合理且规范，我们在 src 下创建 utils 目录来存储我们常用的工具函数。↵↵Axios 作为 HTTP 工具，我们在 utils 目录下创建 axios.ts 作为 Axios 配置文件：↵└── src&#x2F;    ├── utils&#x2F;        ├── axios.ts  &#x2F;&#x2F; Axios 配置文件↵↵import Axios from &#x27;axios&#x27;import &#123; ElMessage &#125; from &#x27;element-plus&#x27;const baseURL = &#x27;https://api.github.com&#x27;const axios = Axios.create(&#123;  baseURL,  timeout: 20000 // 请求超时 20s&#125;)// 前置拦截器（发起请求之前的拦截）axios.interceptors.request.use(  (response) =&gt; &#123;    /**     * 根据你的项目实际情况来对 config 做处理     * 这里对 config 不做任何处理，直接返回     */    return response  &#125;,  (error) =&gt; &#123;    return Promise.reject(error)  &#125;)// 后置拦截器（获取到响应时的拦截）axios.interceptors.response.use(  (response) =&gt; &#123;    /**     * 根据你的项目实际情况来对 response 和 error 做处理     * 这里对 response 和 error 不做任何处理，直接返回     */    return response  &#125;,  (error) =&gt; &#123;    if (error.response &amp;&amp; error.response.data) &#123;      const code = error.response.status      const msg = error.response.data.message      ElMessage.error(`Code: $&#123;code&#125;, Message: $&#123;msg&#125;`)      console.error(`[Axios Error]`, error.response)    &#125; else &#123;      ElMessage.error(`$&#123;error&#125;`)    &#125;    return Promise.reject(error)  &#125;)export default axios↵↵使用 Axios在需要使用 Axios 文件里，引入 Axios 配置文件，参考如下：↵&lt;template&gt;&lt;/template&gt;&lt;script lang=&quot;ts&quot;&gt;  import &#123; defineComponent &#125; from &#x27;vue&#x27;  import axios from &#x27;../utils/axios&#x27;  export default defineComponent(&#123;    setup() &#123;      axios        .get(&#x27;/users/XPoet&#x27;)        .then((res) =&gt; &#123;          console.log(&#x27;res: &#x27;, res)        &#125;)        .catch((err) =&gt; &#123;          console.log(&#x27;err: &#x27;, err)        &#125;)    &#125;  &#125;)&lt;/script&gt;↵↵↵↵集成 CSS 预编译器 Stylus/Sass/Less本项目使用 CSS 预编译器 Stylus，直接安装为开发依赖即可。Vite 内部已帮我们集成了相关的 loader，不需要额外配置。同理，你也可以使用 Sass 或 Less 等。↵↵安装↵npm i stylus -D# ornpm i sass -Dnpm i less -D↵↵使用↵&lt;style lang=&quot;stylus&quot;&gt;  ...&lt;/style&gt;↵↵↵↵至此，一个基于 TypeScript + Vite + Vue3 + Vue Router + Vuex + Element Plus + Axios + Stylus/Sass/Less 的前端项目开发环境搭建完毕，项目 Demo 托管在 GitHub 仓库，需要的同学可以去下载下来，参考学习。↵下面我们来打磨这个项目，增加代码规范约束、提交规范约束、单元测试、自动部署等，让其更完善、更健壮。↵代码规范随着前端应用逐渐变得大型化和复杂化，在同一个项目中有多个人员参与时，每个人的前端能力程度不等，他们往往会用不同的编码风格和习惯在项目中写代码，长此下去，势必会让项目的健壮性越来越差。解决这些问题，理论上讲，口头约定和代码审查都可以，但是这种方式无法实时反馈，而且沟通成本过高，不够灵活，更关键的是无法把控。不以规矩，不能成方圆，我们不得不在项目使用一些工具来约束代码规范。↵本文讲解如何使用 EditorConfig + Prettier + ESLint 组合来实现代码规范化。↵这样做带来好处：↵↵解决团队之间代码不规范导致的可读性差和可维护性差的问题。↵解决团队成员不同编辑器导致的编码规范不统一问题。↵提前发现代码风格问题，给出对应规范提示，及时修复。↵减少代码审查过程中反反复复的修改过程，节约时间。↵自动格式化，统一编码风格，从此和脏乱差的代码说再见。↵↵集成 EditorConfig 配置EditorConfig 有助于为不同 IDE 编辑器上处理同一项目的多个开发人员维护一致的编码风格。↵官网：http://editorconfig.org↵在项目根目录下增加 .editorconfig 文件：↵# Editor configuration, see http://editorconfig.org# 表示是最顶层的 EditorConfig 配置文件root = true[*] # 表示所有文件适用charset = utf-8 # 设置文件字符集为 utf-8indent_style = space # 缩进风格（tab | space）indent_size = 2 # 缩进大小end_of_line = lf # 控制换行类型(lf | cr | crlf)trim_trailing_whitespace = true # 去除行首的任意空白字符insert_final_newline = true # 始终在文件末尾插入一个新行[*.md] # 表示仅 md 文件适用以下规则max_line_length = offtrim_trailing_whitespace = false↵↵注意：↵↵VSCode 使用 EditorConfig 需要去插件市场下载插件 EditorConfig for VS Code 。↵↵↵JetBrains 系列（WebStorm、IntelliJ IDEA 等）则不用额外安装插件，可直接使用 EditorConfig 配置。↵↵↵集成 Prettier 配置Prettier 是一款强大的代码格式化工具，支持 JavaScript、TypeScript、CSS、SCSS、Less、JSX、Angular、Vue、GraphQL、JSON、Markdown 等语言，基本上前端能用到的文件格式它都可以搞定，是当下最流行的代码格式化工具。↵官网：https://prettier.io/↵↵安装 Prettier↵npm i prettier -D↵↵创建 Prettier 配置文件↵Prettier 支持多种格式的配置文件，比如 .json、.yml、.yaml、.js等。↵在本项目根目录下创建 .prettierrc 文件。↵↵配置 .prettierrc↵在本项目中，我们进行如下简单配置，关于更多配置项信息，请前往官网查看 Prettier-Options 。↵&#123;  &quot;useTabs&quot;: false,  &quot;tabWidth&quot;: 2,  &quot;printWidth&quot;: 100,  &quot;singleQuote&quot;: true,  &quot;trailingComma&quot;: &quot;none&quot;,  &quot;bracketSpacing&quot;: true,  &quot;semi&quot;: false&#125;↵↵Prettier 安装且配置好之后，就能使用命令来格式化代码↵# 格式化所有文件（. 表示所有文件）npx prettier --write .↵↵↵↵注意：↵↵VSCode 编辑器使用 Prettier 配置需要下载插件 Prettier - Code formatter 。↵↵↵JetBrains 系列编辑器（WebStorm、IntelliJ IDEA 等）则不用额外安装插件，可直接使用 Prettier 配置。',
    url: '',
    tags: ['Vue3', '前端工程化'],
    categories: ['前端'],
    createTime: '2020-04-25 13:40:41'
  },
  {
    title: '入门前端讲解',
    content:
      'Vue3 跟 Vite 正式版发布有很长一段时间了，生态圈也渐渐丰富起来，作者已在多个项目中使用，总结一下：就是快！也不用担心稳定性问题，开发体验真不是一般好！还没尝试的同学可以从本文开始学习，从 0 开始手把手带你搭建一套规范的 Vite + Vue3 + TypeScript 前端工程化项目环境。↵↵↵本文篇幅较长，从以下几个方面展开：↵↵架构搭建↵代码规范↵提交规范↵单元测试↵自动部署↵↵↵本项目完整的代码托管在 GitHub 仓库，欢迎点亮小星星 🌟🌟↵↵技术栈↵编程语言：TypeScript 4.x + JavaScript↵构建工具：Vite 2.x↵前端框架：Vue 3.x↵路由工具：Vue Router 4.x↵状态管理：Vuex 4.x↵UI 框架：Element Plus↵CSS 预编译：Stylus / Sass / Less↵HTTP 工具：Axios↵Git Hook 工具：husky + lint-staged↵代码规范：EditorConfig + Prettier + ESLint + Airbnb JavaScript Style Guide↵提交规范：Commitizen + Commitlint↵单元测试：vue-test-utils + jest + vue-jest + ts-jest↵自动部署：GitHub Actions↵↵架构搭建请确保你的电脑上成功安装 Node.js，本项目使用 Vite 构建工具，需要 Node.js 版本 &gt;= 12.0.0。↵查看 Node.js 版本：↵node -v↵↵建议将 Node.js 升级到最新的稳定版本：↵# 使用 nvm 安装最新稳定版 Node.jsnvm install stable↵↵使用 Vite 快速初始化项目雏形↵使用 NPM：↵npm init @vitejs/app↵↵使用 Yarn：↵yarn create @vitejs/app↵↵↵↵然后按照终端提示完成以下操作：↵↵输入项目名称↵例如：本项目名称 vite-vue3-starter↵↵↵选择模板↵本项目需要使用 Vue3 + TypeScript，所以我们选择 vue-ts，会自动安装 Vue3 和 TypeScript。↵↵↵你还可以通过附加的命令行选项直接指定项目名和模板，本项目要构建 Vite + Vue3 + TypeScript 项目，则运行：↵# npm 6.xnpm init @vitejs/app vite-vue3-starter --template vue-ts# npm 7+（需要额外的双横线）npm init @vitejs/app vite-vue3-starter -- --template vue-ts# yarnyarn create @vitejs/app vite-vue3-starter --template vue-ts↵↵安装依赖↵npm install↵↵启动项目↵npm run dev↵↵↵如上图，表示 Vite + Vue3 + TypeScript 简单的项目骨架搭建完毕，下面我们来为这个项目集成 Vue Router、Vuex、Element Plus、Axios、Stylus/Sass/Less。↵↵↵修改 Vite 配置文件Vite 配置文件 vite.config.ts 位于根目录下，项目启动时会自动读取。↵本项目先做一些简单配置，例如：设置 @ 指向 src 目录、 服务启动端口、打包路径、代理等。↵关于 Vite 更多配置项及用法，请查看 Vite 官网 https://vitejs.dev/config/ 。↵import &#123; defineConfig &#125; from &#x27;vite&#x27;import vue from &#x27;@vitejs/plugin-vue&#x27;// 如果编辑器提示 path 模块找不到，则可以安装一下 @types/node -&gt; npm i @types/node -Dimport &#123; resolve &#125; from &#x27;path&#x27;// https://vitejs.dev/config/export default defineConfig(&#123;  plugins: [vue()],  resolve: &#123;    alias: &#123;      &#x27;@&#x27;: resolve(__dirname, &#x27;src&#x27;) // 设置 `@` 指向 `src` 目录    &#125;  &#125;,  base: &#x27;./&#x27;, // 设置打包路径  server: &#123;    port: 4000, // 设置服务启动端口号    open: true, // 设置服务启动时是否自动打开浏览器    cors: true // 允许跨域    // 设置代理，根据我们项目实际情况配置    // proxy: &#123;    //   &#x27;/api&#x27;: &#123;    //     target: &#x27;http://xxx.xxx.xxx.xxx:8000&#x27;,    //     changeOrigin: true,    //     secure: false,    //     rewrite: (path) =&gt; path.replace(&#x27;/api/&#x27;, &#x27;/&#x27;)    //   &#125;    // &#125;  &#125;&#125;)↵↵规范目录结构├── publish&#x2F;└── src&#x2F;    ├── assets&#x2F;                    &#x2F;&#x2F; 静态资源目录    ├── common&#x2F;                    &#x2F;&#x2F; 通用类库目录    ├── components&#x2F;                &#x2F;&#x2F; 公共组件目录    ├── router&#x2F;                    &#x2F;&#x2F; 路由配置目录    ├── store&#x2F;                     &#x2F;&#x2F; 状态管理目录    ├── style&#x2F;                     &#x2F;&#x2F; 通用 CSS 目录    ├── utils&#x2F;                     &#x2F;&#x2F; 工具函数目录    ├── views&#x2F;                     &#x2F;&#x2F; 页面组件目录    ├── App.vue    ├── main.ts    ├── shims-vue.d.ts├── tests&#x2F;                         &#x2F;&#x2F; 单元测试目录├── index.html├── tsconfig.json                  &#x2F;&#x2F; TypeScript 配置文件├── vite.config.ts                 &#x2F;&#x2F; Vite 配置文件└── package.json↵↵集成路由工具 Vue Router↵安装支持 Vue3 的路由工具 vue-router@4↵npm i vue-router@4↵↵创建 src/router/index.ts 文件↵在 src 下创建 router 目录，然后在 router 目录里新建 index.ts 文件：↵└── src&#x2F;    ├── router&#x2F;        ├── index.ts  &#x2F;&#x2F; 路由配置文件↵↵import &#123;  createRouter,  createWebHashHistory,  RouteRecordRaw&#125; from &#x27;vue-router&#x27;import Home from &#x27;@/views/home.vue&#x27;import Vuex from &#x27;@/views/vuex.vue&#x27;const routes: Array&lt;RouteRecordRaw&gt; = [  &#123;    path: &#x27;/&#x27;,    name: &#x27;Home&#x27;,    component: Home  &#125;,  &#123;    path: &#x27;/vuex&#x27;,    name: &#x27;Vuex&#x27;,    component: Vuex  &#125;,  &#123;    path: &#x27;/axios&#x27;,    name: &#x27;Axios&#x27;,    component: () =&gt; import(&#x27;@/views/axios.vue&#x27;) // 懒加载组件  &#125;]const router = createRouter(&#123;  history: createWebHashHistory(),  routes&#125;)export default router↵↵根据本项目路由配置的实际情况，你需要在 src 下创建 views 目录，用来存储页面组件。↵我们在 views 目录下创建 home.vue 、vuex.vue 、axios.vue。↵↵在 main.ts 文件中挂载路由配置↵import &#123; createApp &#125; from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import router from &#x27;./router/index&#x27;createApp(App).use(router).mount(&#x27;#app&#x27;)↵↵↵↵集成状态管理工具 Vuex↵安装支持 Vue3 的状态管理工具 vuex@next↵npm i vuex@next↵↵创建 src/store/index.ts 文件↵在 src 下创建 store 目录，然后在 store 目录里新建 index.ts 文件：↵└── src&#x2F;    ├── store&#x2F;        ├── index.ts  &#x2F;&#x2F; store 配置文件↵↵import &#123; createStore &#125; from &#x27;vuex&#x27;const defaultState = &#123;  count: 0&#125;// Create a new store instance.export default createStore(&#123;  state() &#123;    return defaultState  &#125;,  mutations: &#123;    increment(state: typeof defaultState) &#123;      state.count++    &#125;  &#125;,  actions: &#123;    increment(context) &#123;      context.commit(&#x27;increment&#x27;)    &#125;  &#125;,  getters: &#123;    double(state: typeof defaultState) &#123;      return 2 * state.count    &#125;  &#125;&#125;)↵↵在 main.ts 文件中挂载 Vuex 配置↵import &#123; createApp &#125; from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import store from &#x27;./store/index&#x27;createApp(App).use(store).mount(&#x27;#app&#x27;)↵↵↵↵集成 UI 框架 Element Plus↵安装支持 Vue3 的 UI 框架 Element Plus↵npm i element-plus↵↵在 main.ts 文件中挂载 Element Plus↵import &#123; createApp &#125; from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import ElementPlus from &#x27;element-plus&#x27;import &#x27;element-plus/lib/theme-chalk/index.css&#x27;createApp(App).use(ElementPlus).mount(&#x27;#app&#x27;)↵↵↵↵集成 HTTP 工具 Axios↵安装 Axios（Axios 跟 Vue 版本没有直接关系，安装最新即可）↵npm i axios↵↵配置 Axios↵↵为了使项目的目录结构合理且规范，我们在 src 下创建 utils 目录来存储我们常用的工具函数。↵↵Axios 作为 HTTP 工具，我们在 utils 目录下创建 axios.ts 作为 Axios 配置文件：↵└── src&#x2F;    ├── utils&#x2F;        ├── axios.ts  &#x2F;&#x2F; Axios 配置文件↵↵import Axios from &#x27;axios&#x27;import &#123; ElMessage &#125; from &#x27;element-plus&#x27;const baseURL = &#x27;https://api.github.com&#x27;const axios = Axios.create(&#123;  baseURL,  timeout: 20000 // 请求超时 20s&#125;)// 前置拦截器（发起请求之前的拦截）axios.interceptors.request.use(  (response) =&gt; &#123;    /**     * 根据你的项目实际情况来对 config 做处理     * 这里对 config 不做任何处理，直接返回     */    return response  &#125;,  (error) =&gt; &#123;    return Promise.reject(error)  &#125;)// 后置拦截器（获取到响应时的拦截）axios.interceptors.response.use(  (response) =&gt; &#123;    /**     * 根据你的项目实际情况来对 response 和 error 做处理     * 这里对 response 和 error 不做任何处理，直接返回     */    return response  &#125;,  (error) =&gt; &#123;    if (error.response &amp;&amp; error.response.data) &#123;      const code = error.response.status      const msg = error.response.data.message      ElMessage.error(`Code: $&#123;code&#125;, Message: $&#123;msg&#125;`)      console.error(`[Axios Error]`, error.response)    &#125; else &#123;      ElMessage.error(`$&#123;error&#125;`)    &#125;    return Promise.reject(error)  &#125;)export default axios↵↵使用 Axios在需要使用 Axios 文件里，引入 Axios 配置文件，参考如下：↵&lt;template&gt;&lt;/template&gt;&lt;script lang=&quot;ts&quot;&gt;  import &#123; defineComponent &#125; from &#x27;vue&#x27;  import axios from &#x27;../utils/axios&#x27;  export default defineComponent(&#123;    setup() &#123;      axios        .get(&#x27;/users/XPoet&#x27;)        .then((res) =&gt; &#123;          console.log(&#x27;res: &#x27;, res)        &#125;)        .catch((err) =&gt; &#123;          console.log(&#x27;err: &#x27;, err)        &#125;)    &#125;  &#125;)&lt;/script&gt;↵↵↵↵集成 CSS 预编译器 Stylus/Sass/Less本项目使用 CSS 预编译器 Stylus，直接安装为开发依赖即可。Vite 内部已帮我们集成了相关的 loader，不需要额外配置。同理，你也可以使用 Sass 或 Less 等。↵↵安装↵npm i stylus -D# ornpm i sass -Dnpm i less -D↵↵使用↵&lt;style lang=&quot;stylus&quot;&gt;  ...&lt;/style&gt;↵↵↵↵至此，一个基于 TypeScript + Vite + Vue3 + Vue Router + Vuex + Element Plus + Axios + Stylus/Sass/Less 的前端项目开发环境搭建完毕，项目 Demo 托管在 GitHub 仓库，需要的同学可以去下载下来，参考学习。↵下面我们来打磨这个项目，增加代码规范约束、提交规范约束、单元测试、自动部署等，让其更完善、更健壮。↵代码规范随着前端应用逐渐变得大型化和复杂化，在同一个项目中有多个人员参与时，每个人的前端能力程度不等，他们往往会用不同的编码风格和习惯在项目中写代码，长此下去，势必会让项目的健壮性越来越差。解决这些问题，理论上讲，口头约定和代码审查都可以，但是这种方式无法实时反馈，而且沟通成本过高，不够灵活，更关键的是无法把控。不以规矩，不能成方圆，我们不得不在项目使用一些工具来约束代码规范。↵本文讲解如何使用 EditorConfig + Prettier + ESLint 组合来实现代码规范化。↵这样做带来好处：↵↵解决团队之间代码不规范导致的可读性差和可维护性差的问题。↵解决团队成员不同编辑器导致的编码规范不统一问题。↵提前发现代码风格问题，给出对应规范提示，及时修复。↵减少代码审查过程中反反复复的修改过程，节约时间。↵自动格式化，统一编码风格，从此和脏乱差的代码说再见。↵↵集成 EditorConfig 配置EditorConfig 有助于为不同 IDE 编辑器上处理同一项目的多个开发人员维护一致的编码风格。↵官网：http://editorconfig.org↵在项目根目录下增加 .editorconfig 文件：↵# Editor configuration, see http://editorconfig.org# 表示是最顶层的 EditorConfig 配置文件root = true[*] # 表示所有文件适用charset = utf-8 # 设置文件字符集为 utf-8indent_style = space # 缩进风格（tab | space）indent_size = 2 # 缩进大小end_of_line = lf # 控制换行类型(lf | cr | crlf)trim_trailing_whitespace = true # 去除行首的任意空白字符insert_final_newline = true # 始终在文件末尾插入一个新行[*.md] # 表示仅 md 文件适用以下规则max_line_length = offtrim_trailing_whitespace = false↵↵注意：↵↵VSCode 使用 EditorConfig 需要去插件市场下载插件 EditorConfig for VS Code 。↵↵↵JetBrains 系列（WebStorm、IntelliJ IDEA 等）则不用额外安装插件，可直接使用 EditorConfig 配置。↵↵↵集成 Prettier 配置Prettier 是一款强大的代码格式化工具，支持 JavaScript、TypeScript、CSS、SCSS、Less、JSX、Angular、Vue、GraphQL、JSON、Markdown 等语言，基本上前端能用到的文件格式它都可以搞定，是当下最流行的代码格式化工具。↵官网：https://prettier.io/↵↵安装 Prettier↵npm i prettier -D↵↵创建 Prettier 配置文件↵Prettier 支持多种格式的配置文件，比如 .json、.yml、.yaml、.js等。↵在本项目根目录下创建 .prettierrc 文件。↵↵配置 .prettierrc↵在本项目中，我们进行如下简单配置，关于更多配置项信息，请前往官网查看 Prettier-Options 。↵&#123;  &quot;useTabs&quot;: false,  &quot;tabWidth&quot;: 2,  &quot;printWidth&quot;: 100,  &quot;singleQuote&quot;: true,  &quot;trailingComma&quot;: &quot;none&quot;,  &quot;bracketSpacing&quot;: true,  &quot;semi&quot;: false&#125;↵↵Prettier 安装且配置好之后，就能使用命令来格式化代码↵# 格式化所有文件（. 表示所有文件）npx prettier --write .↵↵↵↵注意：↵↵VSCode 编辑器使用 Prettier 配置需要下载插件 Prettier - Code formatter 。↵↵↵JetBrains 系列编辑器（WebStorm、IntelliJ IDEA 等）则不用额外安装插件，可直接使用 Prettier 配置。',
    url: '',
    tags: ['Vue3', 'Vite'],
    categories: ['前端'],
    createTime: '2020-04-29 13:40:41'
  }
]
